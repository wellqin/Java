package design.patterns.sevenprinciple;

/**
 * @Author: Wellqin
 * @Date: 2020/8/16 16:51
 *
 * 合成复用原则：尽量使用组合/聚合的方式，而不要使用继承。
 *
 * 例如： A 类和 B 类，B 类想要使用 A 类的两个方法，第一个想到的是继承，但是这种做法耦合性很高，
 * 如果说仅仅是想要使用这两个方法，而没有别的根本上需要用到继承的必要性，那么可能会带来很多麻烦，
 * 比如还有别的类也继承了 A ，有必要修改 A 的时候还要考虑 B 会不会收影响。
 *
 * 所以尽量使用的做法就是聚合或者合成：
 *
 * 7.1 聚合
 *
 * 将 A 作为一个私有变量加入到 B 里面，在 B 里面写一个 set 方法将 A 实例化，然后去调用想要的方法，这就叫做聚合。
 * 类似于我们在前面第三个原则”依赖倒转原则“最后写的传递依赖的方式的setter方法。
 *
 * 7.2 组合
 * 将 A 直接实例化在 B 里面，那么 B 创建的时候，A 就已经有了一个实例化的对象，然后调用方法，和前面的里氏替换法则后面的做法是一样的。
 */

public class CompositeMultiplexing {
}
